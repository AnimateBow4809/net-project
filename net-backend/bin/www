#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('net-backend:server');
const http = require('http');
const mongoose = require('mongoose');
const User = require('../models/user');
const Message = require('../models/message');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: "*", // Allow all origins (change this for security)
    methods: ["GET", "POST"],
  },
});

mongoose.connect("mongodb://mongo/webrtc", { useNewUrlParser: true, useUnifiedTopology: true });
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

io.on("connection", async (socket) => {
  console.log("User connected:", socket.id);

  const waitingUser = await User.findOne({ pairedWith: null });

  if (waitingUser) {
    // Pair the users
    await User.findByIdAndUpdate(waitingUser._id, { pairedWith: socket.id });
    await User.create({ socketId: socket.id, pairedWith: waitingUser.socketId });

    io.to(waitingUser.socketId).emit("matched", { peerId: socket.id });
    io.to(socket.id).emit("matched", { peerId: waitingUser.socketId });
  } else {
    await User.create({ socketId: socket.id });
  }

  // Handle WebRTC signaling
  socket.on("offer", (data) => {
    io.to(data.peerId).emit("offer", { sdp: data.sdp, sender: socket.id });
  });

  socket.on("answer", (data) => {
    io.to(data.peerId).emit("answer", { sdp: data.sdp, sender: socket.id });
  });

  socket.on("ice-candidate", (data) => {
    io.to(data.peerId).emit("ice-candidate", { candidate: data.candidate });
  });

  socket.on("disconnect", async () => {
    console.log("User disconnected:", socket.id);

    const user = await User.findOne({ socketId: socket.id });
    if (user) {
      if (user.pairedWith) {
        io.to(user.pairedWith).emit("user-disconnected");
        await User.findOneAndUpdate({ socketId: user.pairedWith }, { pairedWith: null });

        // Try to find a new pair for the remaining user
        findNewPair({ id: user.pairedWith });
      }
      await User.deleteOne({ socketId: socket.id });
    }
  });

  socket.on("message", async (data) => {
    try {
        if (!data.messageData || typeof data.messageData !== "string" || data.messageData.trim() === "") {
            console.warn("Received message without content. Ignoring.");
            console.log("Received message:", data);
            return;
        }
        const message = new Message({
            reciverSocketId: data.reciver,
            senderSocketId: socket.id,
            date: new Date(),
            content: data.messageData
        });

        await message.save();

        io.to(data.reciver).emit("message", data);
        
        console.log("Message stored:", data);
    } catch (error) {
        console.error("Error saving message:", error);
    }
});

});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

async function findNewPair(socket) {
  const waitingUser = await User.findOne({ pairedWith: null, socketId: { $ne: socket.id } });

  if (waitingUser) {
    await User.findByIdAndUpdate(waitingUser._id, { pairedWith: socket.id });
    await User.findOneAndUpdate({ socketId: socket.id }, { pairedWith: waitingUser.socketId });

    io.to(waitingUser.socketId).emit("matched", { peerId: socket.id });
    io.to(socket.id).emit("matched", { peerId: waitingUser.socketId });

    console.log(`User ${socket.id} paired with ${waitingUser.socketId}`);
  } else {
    await User.findOneAndUpdate({ socketId: socket.id }, { pairedWith: null });
    console.log(`User ${socket.id} is waiting for a new partner.`);
  }
}
